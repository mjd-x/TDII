;-------------------------------------------------------------------------------
; Fecha: 06/06/2021
;
; Programador: FUENTES, Horacio 
;
/* Descripción: Practica Parcial - El micro controla una cinta transportadora 
 mediante un motor en P1.4, luego de RESET debe encender el motor. Se dispone 
 un sensor que emite el código del producto que pasa: ( 0AH para producto A) 
 ( 0BH para el producto B) y otros códigos. Se dispone una paleta en P1.5 para 
 desviar los productos hacia cajas de A o B ( con 1 van hacia la caja de A, 
 y con 0 van hacia la caja de B )
  Si llegan 100 productos de A,  o 100 productos de B, detener la cinta 
  y avisar con LED en P1.2. Si llega un producto distinto al A o B,  
  detener la cinta inmediatamente y dar alarma con P1.3 = 1
*/

; Modificaciones:
;
;-------------------------------------------------------------------------------

$bitdef.h       ;manejo de a bits 
$ioAT89C52.h    ;incluye los registros del microcontrolador

        NAME    main
        PUBLIC  main
        
        ;--ISRs
        PUBLIC  Isr_Ext0
        ;--Declaro públicas las subrutinas
        PUBLIC  Inicializacion_Isr
        PUBLIC  Sensado
        PUBLIC  Guiado_Prod
        

;---CONSTANTES------------------------------------------------------------------

  ;Registros generales
CTE_SUMA        EQU     0x3E        ; Número cte para operar
LONG_BUFFER     EQU     10          ; Longitud del buffer
ADDR_INICIAL    EQU     0x40        ; Dirección de memoria inicial

  ;Constantes para los segmentos
SEG_CODIGO     EQU     0030h    ; inicio seg codigo
SEG_DATOS1     EQU     0020h    ; seg datos     
SEG_CONST      EQU     0090h    ; Constantes en rom
SEG_STACK      EQU     00C0h    ; Segmento de stack
LONG_STACK     EQU     10       ; Longitud en bytes del stack

  ;Para interrupciones
INT_PRIORIDAD   EQU     0x00    ; prioridad baja
INT_HABILITADAS EQU     b'00000001    ;IE_EA=0, 0, 0, IE_S=0, IE_ET1=0,IE_EX1=0, IE_ET0=0, IE_EX0=1
TCON_EXTERNO    EQU     b'00000000    ;TF1=0,TR1=0,TF0=0,TR0=0,IE1=0,IT1=0,IE0=0, IT0=0, TCON_bit 

  ;Para programaPrincipal
LED                     EQU     P1.2  ; LED ALARMA
ALARMA                  EQU     P1.3  ; ALCARMA OTRO PRODUCTO
MOTOR                   EQU     P1.4  ; MOTOR
PALETA                  EQU     P1.5  ; PALETA SELECTORA


PRODUCTO_A              EQU     0030H ; COD 0AH
PRODUCTO_B              EQU     0031H ; COD 0BH
PRODUCTO_C              EQU     0032H ; COD 0CH
CODIGO_PROD             EQU     0033H ; VARIABLE SE CARGA EL CÓDIGO DEL PRODUCTO SOBRE LA CINTA
NRO_ALEATORIO           EQU     0034H ; NRO ALEATORIO PARA GENERACION DE COD
REGISTRO_2              EQU     0035H 

;-------------------------------------------------------------------------------
;---SEGMENTO DE CODIGO----------------------------------------------------------
           ; Direct the reset vector to the program entry label. 
           ;asegn   INTVEC:CODE, 0x0000
            ASEG
            ORG 0000h                     ; RESET
            LJMP main                     ; salto al main                       
           
           ;INT TIMER0 vector
            ASEG
            ORG 0003H                     ;(1°) Definir el vector de interrupción
            LJMP Isr_Ext0                 ;(2°) Definir el el salto a la ISR
;---SEGMENTO DE STACK-----------------------------------------------------------
            ;RSEG ISTACK:IDATA:NOROOT(0)
            ASEG
            ORG 00b8h
stack_init  DS          LONG_STACK             ; Define el segmento de stack       
;---SEGMENTO DE DATOS-----------------------------------------------------------

;:::Segmento relocalizable::::::::::::::
;       RSEG    IDATA_Z:DATA:NOROOT  
;:::::::::::::::::::::::::::::::::::::::
;::Segmento absoluto::::::::::::::::::::
        ASEG    
        ORG     SEG_DATOS1
;:::::::::::::::::::::::::::::::::::::::

var_bit        DS       1   

;ESPACIO de BUFFER
buffer  DS      LONG_BUFFER

;TABLA RAM
        RSEG    IDATA_Z:DATA:NOROOT  
     
;-------------------------------------------------------------------------------
;Inicia el código
        
        ; RSEG    NEAR_CODE:CODE:ROOT            ; defino un segmento de código
        RSEG    RCODE
        ORG     SEG_CODIGO                      ; define el punto de inicio del Programa (code) 

main    

    ;**Inicializaciones
        ; Inicializo el STACK
        MOV SP,#stack_init-1                    ; inicializo el stack
        
        MOV     PRODUCTO_A, #100               ; INICIALIZA PRODUCTO A PARA IR DECREMENTANDOSE
        MOV     PRODUCTO_B, #100               ; INICIALIZA PRODUCTO B PARA IR DECREMENTANDOSE
        MOV     PRODUCTO_C, #0                 ; INICIALIZA PRODUCTO C 
        MOV     CODIGO_PROD, #00H             ; INICIALIZA COD_PROD EN EL CÓDIGO #00H (INEXISTENTE)
        CLR     LED                             ; APAGO LED
        CLR     ALARMA                          ; APAGO ALARMA
        CALL    Inicializacion_Isr
        SETB    MOTOR                           ;INICIA MOTOR
        MOV     NRO_ALEATORIO, #0               ;INICIA LA CUENTA DE ALEATORIO

                
;**Inicio loop principal    
Loop_ppal:  
        CALL Sensado                            ; llama subrutina de sensado SENSA SI LLEGO A 100 PRODUCTOS
        INC     NRO_ALEATORIO
        CALL    Guiado_Prod                     ; SEGUN EL CODIGO QUE LEE PONE LA PALETA EN 0 (PARA B) O EN 1 (PARA A)
salir:  JMP     Loop_ppal                       ; repito, loop

;-------Subrutinas--------------------------------------------------------------
        RSEG NEAR_CODE:CODE:NOROOT(0)
        
;===========SUBRUTINAS==========================================================
;-------------------------------------------------------------------------------
; Nombre: Rutina de Inicializacion de Interrupciones
; Parametros: ninguno
; Devuelve: nada
; Modifica:
; Nivel de Stack: 2
; Descripción:
;       Inicializa las interrupciones para admitir Externa0
;-------------------------------------------------------------------------------
Inicializacion_Isr:
        MOV     IP, #INT_PRIORIDAD
        MOV     TCON, #TCON_EXTERNO
        MOV     IE, #INT_HABILITADAS
        SETB    IE_EA
        MOV     R5, IE
        RET
;-------------------------------------------------------------------------------
; Nombre: Sensado
; Parametros: ninguno
; Devuelve: nada
; Modifica:
; Nivel de Stack: 2
; Descripción:
;       Comprueba si A O B llegó a 100
;-------------------------------------------------------------------------------
Sensado:
      MOV       R2, PRODUCTO_A
      MOV       R3, PRODUCTO_B
      CJNE      R2, #0, SENSAR_PROD_B
      CLR       MOTOR
      SETB      LED
      JMP       SALIR_SENSADO
      
SENSAR_PROD_B:
      CJNE      R3, #0, SALIR_SENSADO
      CLR       MOTOR
      SETB      LED
      
SALIR_SENSADO:
      RET
;-------------------------------------------------------------------------------
; Nombre: Guiado_Prod
; Parametros: ninguno
; Devuelve: nada
; Modifica:
; Nivel de Stack: 2
; Descripción:
;       Comprueba si CODIGO_PROD = 0AH PALETA=1, si CODIGO_PROD = 0BH PALETA=0
;-------------------------------------------------------------------------------
Guiado_Prod:
      MOV       R4, CODIGO_PROD
      CJNE      R4, #0AH, PALETA_0  ; SI NO ES PRODUCTO A PONE PALETA EN 0 (B)
      SETB      PALETA
      JMP       SALIR_GUIADO
PALETA_0:
      CLR       PALETA
      
SALIR_GUIADO:
      RET

;===ISRs========================================================================

;-------------------------------------------------------------------------------
; Nombre: Isr_Ext0
; Parametros: ninguno
; Devuelve:nada
; Modifica:
;       PRODUCTO_A, PRODUCTO_B,PRODUCTO_C
; Nivel de Stack: 2
; Descripción:
;       Se "desencadena" cuando pasa un producto y genera un código, si el cod es C la detiene inmediatamente
;-------------------------------------------------------------------------------  
 Isr_Ext0:
      ;-------------------------------------------------------------------------
      ; Preparo todo para atender la interrupción (Salvo el contexto)
      ;-------------------------------------------------------------------------     
      
       PUSH	PSW				; Resguardo registros modificados por esta subrutina
       PUSH	A                               ; Resguardo Acumulador
       PUSH	B                               ; Resguardo B
       MOV      REGISTRO_2, R2
       PUSH     REGISTRO_2
      ;-------------------------------------------------------------------------
      ; Rutina de Interrupción
      ;-------------------------------------------------------------------------
      MOV       A, NRO_ALEATORIO
      MOV       B, #3
      DIV       AB              ; SI B=0 => PROD A, SI B=1 => PROD B, SI B=2 => PROD C
      MOV       R2, B
      CJNE      R2,#0, PROD_B
      MOV       CODIGO_PROD , #0AH
      DEC       PRODUCTO_A
      JMP       SALIR_Isr_Ext0
PROD_B:
      CJNE      R2,#1, PROD_C
      MOV       CODIGO_PROD, #0BH
      DEC       PRODUCTO_B
      JMP       SALIR_Isr_Ext0
PROD_C:
      MOV       CODIGO_PROD, #0CH ; SI NO ES A O B PARA EL MOTOR Y PRENDE LA ALARMA
      CLR       MOTOR
      SETB      ALARMA
      
SALIR_Isr_Ext0:
      ; Recupero todos los registros y salgo de la rutina de interrupcion
      POP       REGISTRO_2
      MOV       R2,REGISTRO_2
      POP       B
      POP	A		    ; Recupero registros previamente resguardados
      POP	PSW


      RETI                         ; no hace nada mas y sale de la interrupcion
 
;===============================================================================                

FINALIZAR:
  END     main                          ; fin del programa